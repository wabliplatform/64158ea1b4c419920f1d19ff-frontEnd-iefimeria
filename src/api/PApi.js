/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import P from '../model/P';

/**
* P service.
* @module api/PApi
* @version 1.0.0
*/
export default class PApi {

    /**
    * Constructs a new PApi. 
    * @alias module:api/PApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createp operation.
     * @callback module:api/PApi~createpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/P} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/P} P data to be created
     * @param {module:api/PApi~createpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/P}
     */
    createp(P, callback) {
      let postBody = P;
      // verify the required parameter 'P' is set
      if (P === undefined || P === null) {
        throw new Error("Missing the required parameter 'P' when calling createp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = P;
      return this.apiClient.callApi(
        '/p', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletep operation.
     * @callback module:api/PApi~deletepCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} pId the Id parameter
     * @param {module:api/PApi~deletepCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletep(pId, callback) {
      let postBody = null;
      // verify the required parameter 'pId' is set
      if (pId === undefined || pId === null) {
        throw new Error("Missing the required parameter 'pId' when calling deletep");
      }

      let pathParams = {
        'pId': pId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/p/{pId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllp operation.
     * @callback module:api/PApi~getAllpCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/P>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/PApi~getAllpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/P>}
     */
    getAllp(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [P];
      return this.apiClient.callApi(
        '/p/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getp operation.
     * @callback module:api/PApi~getpCallback
     * @param {String} error Error message, if any.
     * @param {module:model/P} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} pId the Id parameter
     * @param {module:api/PApi~getpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/P}
     */
    getp(pId, callback) {
      let postBody = null;
      // verify the required parameter 'pId' is set
      if (pId === undefined || pId === null) {
        throw new Error("Missing the required parameter 'pId' when calling getp");
      }

      let pathParams = {
        'pId': pId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = P;
      return this.apiClient.callApi(
        '/p/{pId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatep operation.
     * @callback module:api/PApi~updatepCallback
     * @param {String} error Error message, if any.
     * @param {module:model/P} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} pId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/P} opts.P data to be updated
     * @param {module:api/PApi~updatepCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/P}
     */
    updatep(pId, opts, callback) {
      opts = opts || {};
      let postBody = opts['P'];
      // verify the required parameter 'pId' is set
      if (pId === undefined || pId === null) {
        throw new Error("Missing the required parameter 'pId' when calling updatep");
      }

      let pathParams = {
        'pId': pId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = P;
      return this.apiClient.callApi(
        '/p/{pId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
